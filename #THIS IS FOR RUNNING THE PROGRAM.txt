#THIS IS FOR RUNNING THE PROGRAM




Set-ExecutionPolicy -Scope Process -ExecutionPolicy Bypass
.\venv\Scripts\activate
 Set-Alias uv python 
uv agent.py download-files
uv agent.py console  





#MAIN CODE###


import asyncio
import logging
from livekit import agents
from livekit.agents import AgentSession, Agent, RoomInputOptions
from livekit.plugins import google, noise_cancellation
from prompt import AGENT_INSTRUCTION, AGENT_RESPONSE

# Suppress all warnings & audio debug logs
logging.getLogger("livekit.plugins.google").setLevel(logging.ERROR)
logging.getLogger("livekit.agents.voice").setLevel(logging.ERROR)

MAX_HISTORY = 5
conversation_history = []

class Assistant(Agent):
    def __init__(self) -> None:
        super().__init__(instructions=AGENT_INSTRUCTION)

async def entrypoint(ctx: agents.JobContext):
    session = AgentSession(
        llm=google.beta.realtime.RealtimeModel(
            model="gemini-2.0-flash-exp",
            voice="Puck",
            temperature=0.8,
            api_key="AIzaSyAuJQzCodbh_zAf6wCO5nshbrMm1frnd3k",
            instructions=AGENT_INSTRUCTION,
        )
    )

    await session.start(
        room=ctx.room,
        agent=Assistant(),
        room_input_options=RoomInputOptions(
            noise_cancellation=noise_cancellation.BVC(),
        ),
    )

    try:
        conversation_history.append(AGENT_RESPONSE)
        context = conversation_history[-MAX_HISTORY:]

        speech_handle = await asyncio.wait_for(
            session.generate_reply(instructions="\n".join(context)),
            timeout=30
        )

        # Only print text replies
        reply_text = getattr(speech_handle, "text", None)
        if reply_text:
            print("Generated Reply:", reply_text)
            conversation_history.append(reply_text)

    except asyncio.TimeoutError:
        print("Timeout: LLM did not generate a reply in time.")
    except Exception as e:
        print(f"Error generating reply: {e}")

if __name__ == "__main__":
    agents.cli.run_app(agents.WorkerOptions(entrypoint_fnc=entrypoint))
